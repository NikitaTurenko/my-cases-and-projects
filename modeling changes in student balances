-- Первая транзакция для каждого студента
with first_payments as 
    (
    select user_id, min(date_trunc('day',transaction_datetime)) as first_transaction 
    from skyeng_db.payments
    where id_transaction is not null 
        and status_name = 'success'
    group by 1
    ),
-- Все учебные даты за 2016 год
all_dates as 
    (
    select distinct(date_trunc('day', class_start_datetime)) as dt
    from skyeng_db.classes
    where class_start_datetime<'2017-01-01'
    ),
-- Уроки пройденные студентом после первой покупки
all_dates_by_user as 
    (
    select user_id, dt
    from first_payments as fp
        join all_dates ad on fp.first_transaction <= ad.dt
    ), 
-- Изменения балансов успешных транзакций
payments_by_dates as 
    (
select user_id, date_trunc('day',transaction_datetime) as payment_date, sum(classes) as transaction_balance_change
from skyeng_db.payments
where id_transaction is not null 
    and status_name='success'
group by user_id, date_trunc('day',transaction_datetime)
    ),
-- Баланс студентов, сформированный транзакциями
payments_by_dates_cumsum as 
    (
    select u.user_id, dt,transaction_balance_change, sum(coalesce((transaction_balance_change),0)) over(partition by u.user_id order by dt) as transaction_balance_change_cs
    from all_dates_by_user as u 
        left join payments_by_dates as pb on u.user_id = pb.user_id and u.dt=pb.payment_date
    ),
-- Кол-во уроков каждый день для кадого ученика
classes_by_dates as 
    (
    select user_id, date_trunc('day', class_start_datetime) as class_date, count(classes)*-1 as classes
    from skyeng_db.classes
    where class_status in ('success', 'failed_by_student') 
        and class_type!='trial'
    group by 1, 2
    ),
-- Пройденные уроки студентов
classes_by_dates_cumsum as 
    (
    select u.user_id, dt, classes, sum(coalesce((classes),0)) over(partition by u.user_id order by dt rows between unbounded preceding and current row) as classes_cs
    from all_dates_by_user as u 
        left join classes_by_dates as pd on u.user_id = pd.user_id and u.dt=pd.class_date
    )
-- Баланс для каждого студента и сумма по полям 
    select p.user_id, p.dt::date::text, sum(p.transaction_balance_change) as sum_transaction_balance_change, sum(p.transaction_balance_change_cs) as sum_transaction_balance_change_cs, sum(c.classes) as sum_classes, sum(c.classes_cs) as sum_classes_cs, sum(c.classes_cs+transaction_balance_change_cs) as balance
    from payments_by_dates_cumsum as p
        join classes_by_dates_cumsum c on p.user_id=c.user_id and p.dt=c.dt
        group by p.user_id, p.dt
        order by user_id
